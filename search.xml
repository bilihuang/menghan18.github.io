<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git常用命令]]></title>
    <url>%2Ftools%2FgitCommand%2F</url>
    <content type="text"><![CDATA[一、新建代码库123git init 在当前目录新建一个Git代码库 git init [project-name] 新建一个目录，将其初始化为Git代码库 git clone [url] 下载一个项目和它的整个代码历史 二、配置1234git config --list 显示当前的Git配置git config -e [--global] 编辑Git配置文件git config [--global] user.name &quot;[name]&quot; git config [--global] user.email &quot;[email address]&quot; 设置提交代码时的用户信息 三、添加/删除/修改文件123456789git status 查看状态git diff 查看变更内容git add [file1] [file2] ... 添加指定文件到暂存区git add [dir] 添加指定目录到暂存区，包括子目录git add . 添加当前目录的所有文件到暂存区git add -p 添加每个变化前，都会要求确认 对于同一个文件的多处变化，可以实现分次提交 git rm [file1] [file2] ...删除工作区文件，并且将这次删除放入暂存区git rm --cached [file] 停止追踪指定文件，但该文件会保留在工作区git mv [file-original] [file-renamed] 改名文件，并且将这个改名放入暂存区 四、代码提交123456git commit -m [message] 提交暂存区到仓库区git commit [file1] [file2] ... -m [message]提交暂存区的指定文件到仓库区git commit -a 提交工作区自上次commit之后的变化，直接到仓库区git commit -v提交时显示所有diff信息git commit --amend -m [message] 使用一次新的commit，替代上一次提交 如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit --amend [file1] [file2] ... 重做上一次commit，并包括指定文件的新变化 五、分支123456789101112131415git branch 显示所有本地分支git branch -r 列出所有远程分支git branch -a 列出所有本地分支和远程分支git branch [branch-name] 新建一个分支，但依然停留在当前分支git branch --track [branch] [remote-branch] 新建一个分支，与指定的远程分支建立追踪关系git branch -d [branch-name] 删除分支git push origin --detele [branch-name] git branch -dr [remote/branch] 删除远程分支git checkout -b [branch] 新建一个分支，并切换到该分支git checkout [branch-name] 切换到指定分支，并更新工作区git checkout - 切换到上一个分支git branch --set -upstream [branch] [remote-branch] 建立追踪关系，在现有分支与指定的远程分支之间git merge [branch] 合并指定分支到当前分支git rebase &lt;branch&gt; 衍合指定分支到当前分支git cherry-pick [commit] 选择一个commit，合并到当前分支 六、标签12345678git tag 列出所有本地标签git tag &lt;tag-name&gt; 基于最新的提交创建标签git tag -d &lt;tag-name&gt; 删除指定标签git push origin :refs/tags/[tag-name] 删除远程标签git show [tag] 查看标签信息git push [remote] [tag] 提交指定标签git push [remote] --tags 提交所有标签git checkout -b [branch] [tag] 新建一个分支，指向某个标签 七、查看信息123456789101112131415161718192021git status 显示有变更的文件git log 显示当前分支的版本历史git log --stat 显示提交历史，以及每次提交发生变更的文件git log -S [keyword] 根据关键词搜索提交历史git log [tag] HEAD --pretty=format:%s 显示某个提交之后的所有变动git log [tag] HEAD --grep featuregit log --follow [file]git whatchanged [file] 显示某个文件的版本历史，包括文件改名git log -p [file] 显示指定文件相关的每一次diffgit log -5 --pretty --online 显示过去5次提交git shortlog -sn 显示所有提交过的用户，按提交次数排序git blame [file] 显示指定文件是何人何时修改信息git diff 显示暂存区与工作区的差异git diff --cached [file] 显示暂存区和上一个提交的差异git diff HEAD 显示工作区与当前分支最新调教之间的差异git diff [first-branch]...[second-branch] 显示两次提交之间的差异git diff --short stat &quot;@&#123;0 day ago&#125;&quot; 显示今天你写了多少行代码git show [commit] 显示某次提交的元数据和内容变化git show --name-only [commit] 显示某次提交发生变化的文件gitshow [commit]:[filename] 显示某次提交时，某个文件的内容git reflog 显示当前分支的最近几次提交 八、远程操作12345678910git fetch [remote] 下载远程仓库的所有变动git pull [remote] [branch] 取回远程参股的变化，并与本地分支合并git remote -v 显示所有远程仓库git remote show [remote] 显示某个远程仓库的信息git remote add [shortname] [url] 增加一个新的远程仓库git push [remote] [branch] 上传本地指定分支到远程仓库git push [remote] --force 强制推送当前分支到远程仓库git push [remote] --all 推动所有分支到远程仓库git push &lt;remote&gt; 删除远程分支或标签git push --tags 上传所有标签 九、撤销123456789101112131415git reset --hard HEAD 撤销工作目录中所有未提交文件的修改内容git checkout HEAD &lt;file&gt; 撤销指定的未提交文件的修改内容git revert &lt;commit&gt; 撤销指定的提交git log --before=&quot;1 days&quot; 退回到之前1天的版本git checkout [file] 恢复暂存区的指定文件到工作区git checkout [commit] [file] 恢复某个提交的指定文件到暂存区和工作区git checkout . 恢复暂存区的所有文件到工作区git reset [file] 重置暂存区的指定文件，遇上一次提交保持一致，但工作区不变git reset --hard 重置暂存区与工作区，与上次提交保持一致git reset [commit] 重置当前分支的指针为指定提交，同时重置暂存区，但工作区不变git reset --hard [commit] 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致git reset --keep [commit] 重置当前HEAD为指定commit，但保持暂存区和工作区不变git revert [commit] 新建一个commit，用来撤销指定commit，后者的所有变化豆浆杯前者抵消，并且应用到当前分支git stashgit stash pop 暂时将未提交的变化移除，稍后再移入]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
